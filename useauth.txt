// hooks/useAuth.jsx
import { createContext } from 'react';
import faker from 'faker';

const AuthContext = createContext();

export function useAuth() {
  const context = React.useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within a AuthProvider');
  }
  return context;
}

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);

  const login = (email, password) => {
    if (email === 'test@example.com' && password === 'test') {
      const newUser = {
        id: faker.datatype.uuid(),
        name: faker.name.findName(),
        email,
      };
      setUser(newUser);
      return newUser;
    }
    return null;
  };

  const register = (name, email, password) => {
    if (email === 'test@example.com' && password === 'test') {
      const newUser = {
        id: faker.datatype.uuid(),
        name,
        email,
      };
      setUser(newUser);
      return newUser;
    }
    return null;
  };

  const value = { user, login, register };
  return <AuthContext.Provider value={value}>{`children}</AuthContext.Provider>`;
}

export default AuthContext;